from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = "8252909254:AAF6Guzpm18fb3K8puNq4zp-eDBeYqOXCE4"

# üî• ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å ⁄ØÿßŸÜ‚ÄåŸáÿß
categories = {
    "AR": ["AK-47","AK117","AN-94","AS VAL","CR-56 AMAX","FAMAS","FFAR","Grau 5.56","HBRa3","ICR-1","Kilo 141","KN-44","LK24","M13","Man-O-War","Type 25","QBZ-95","XM4"],
    "SMG": ["MSMC","PDW-57","Razorback","PP19 Bizon","GKS","MX9","VMP","CX-9","Striker 45","KSP-45"],
    "Sniper": ["DL Q33","Locus","Arctic .50","XPR-50","M21 EBR","NA-45","Outlaw","HDR"],
    "Marksman": ["SP-R 208","SKS","SVD","Type 63"],
    "LMG": ["Holger 26","Hades","UL736","Raal MG","MG 42"],
    "Shotgun": ["R9-0","Striker","HS0405"]
}

PAGE_SIZE = 9

# üü¢ ÿ≠ÿ∞ŸÅ ÿÆŸàÿØ⁄©ÿßÿ± Ÿæ€åÿßŸÖ
async def auto_delete(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.delete_message(chat_id=context.job.chat_id, message_id=context.job.data)

# üü¢ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ®ÿß ÿ™ÿß€åŸÖÿ± ÿ≠ÿ∞ŸÅ
async def send_with_timer(update, context, text, reply_markup=None):
    msg = await update.message.reply_text(text, reply_markup=reply_markup)
    context.job_queue.run_once(auto_delete, 60, chat_id=msg.chat_id, data=msg.message_id)

# üîπ ŸÖÿ±ÿ≠ŸÑŸá ÿßŸàŸÑ: ÿßŸÜÿ™ÿÆÿßÿ® ŸÖŸàÿØ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üî• ÿ®ÿ™ŸÑ (Battle)", callback_data="mode_battle")],
        [InlineKeyboardButton("‚ö°Ô∏è ŸÖŸàŸÑÿ™€å (Multiplayer)", callback_data="mode_multi")]
    ]
    msg = await update.message.reply_text("üëá ŸÖŸàÿØ ÿ®ÿßÿ≤€å ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:", reply_markup=InlineKeyboardMarkup(kb))
    context.job_queue.run_once(auto_delete, 60, chat_id=msg.chat_id, data=msg.message_id)

# üîπ ÿ≥ÿßÿÆÿ™ ⁄©€åÿ®Ÿàÿ±ÿØ ÿØÿ≥ÿ™Ÿá‚ÄåŸáÿß
def category_keyboard(mode):
    kb = [[InlineKeyboardButton(cat, callback_data=f"cat_{mode}_{cat}")] for cat in categories.keys()]
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ÿßŸÜÿ™ÿÆÿßÿ® ŸÖŸàÿØ", callback_data="back_mode")])
    return InlineKeyboardMarkup(kb)

# üîπ ÿ≥ÿßÿÆÿ™ ÿµŸÅÿ≠Ÿá‚Äåÿ®ŸÜÿØ€å €≥√ó€≥ ÿ®ÿ±ÿß€å ⁄ØÿßŸÜ‚ÄåŸáÿß + ÿØ⁄©ŸÖŸá ÿ®ÿßÿ≤⁄Øÿ¥ÿ™
def guns_keyboard(mode, cat, page=0):
    guns = categories[cat]
    items = guns[page*PAGE_SIZE:(page+1)*PAGE_SIZE]
    keyboard = []
    for i in range(0, len(items), 3):
        row = [InlineKeyboardButton(items[j], callback_data=f"gun_{mode}_{items[j]}") for j in range(i, min(i+3, len(items)))]
        keyboard.append(row)

    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è ŸÇÿ®ŸÑ€å", callback_data=f"page_{mode}_{cat}_{page-1}"))
    if (page+1)*PAGE_SIZE < len(guns):
        nav.append(InlineKeyboardButton("‚û°Ô∏è ÿ®ÿπÿØ€å", callback_data=f"page_{mode}_{cat}_{page+1}"))
    if nav:
        keyboard.append(nav)

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ÿØÿ≥ÿ™Ÿá‚ÄåŸáÿß", callback_data=f"back_cat_{mode}")])
    return InlineKeyboardMarkup(keyboard)

# üîπ ŸÖÿØ€åÿ±€åÿ™ ÿØ⁄©ŸÖŸá‚ÄåŸáÿß
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    # üî∏ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ÿßŸÜÿ™ÿÆÿßÿ® ŸÖŸàÿØ
    if data == "back_mode":
        kb = [
            [InlineKeyboardButton("üî• ÿ®ÿ™ŸÑ (Battle)", callback_data="mode_battle")],
            [InlineKeyboardButton("‚ö°Ô∏è ŸÖŸàŸÑÿ™€å (Multiplayer)", callback_data="mode_multi")]
        ]
        msg = await q.edit_message_text("üëá ŸÖŸàÿØ ÿ®ÿßÿ≤€å ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:", reply_markup=InlineKeyboardMarkup(kb))
        context.job_queue.run_once(auto_delete, 60, chat_id=msg.chat_id, data=msg.message_id)

    # üî∏ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ÿØÿ≥ÿ™Ÿá‚ÄåŸáÿß
    elif data.startswith("back_cat_"):
        mode = data.split("_")[2]
        msg = await q.edit_message_text(f"üîπ ŸÖŸàÿØ ÿßŸÜÿ™ÿÆÿßÿ® ÿ¥ÿØŸá: {mode.upper()}\nüìÇ ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å ⁄ØÿßŸÜ‚ÄåŸáÿß ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:", reply_markup=category_keyboard(mode))
        context.job_queue.run_once(auto_delete, 60, chat_id=msg.chat_id, data=msg.message_id)

    # üî∏ ÿßŸÜÿ™ÿÆÿßÿ® ŸÖŸàÿØ
    elif data.startswith("mode_"):
        mode = data.split("_")[1]
        msg = await q.edit_message_text(f"üîπ ŸÖŸàÿØ ÿßŸÜÿ™ÿÆÿßÿ® ÿ¥ÿØ: {mode.upper()}\nüìÇ ÿØÿ≥ÿ™Ÿá‚Äåÿ®ŸÜÿØ€å ⁄ØÿßŸÜ‚ÄåŸáÿß ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:", reply_markup=category_keyboard(mode))
        context.job_queue.run_once(auto_delete, 60, chat_id=msg.chat_id, data=msg.message_id)

# üî∏ ŸÜŸÖÿß€åÿ¥ ⁄ØÿßŸÜ‚ÄåŸáÿß
    elif data.startswith("cat_"):
        _, mode, cat = data.split("_")
        msg = await q.edit_message_text(f"üìÇ ÿØÿ≥ÿ™Ÿá: {cat} | ŸÖŸàÿØ: {mode.upper()}", reply_markup=guns_keyboard(mode, cat, 0))
        context.job_queue.run_once(auto_delete, 60, chat_id=msg.chat_id, data=msg.message_id)

    # üî∏ ÿµŸÅÿ≠Ÿá‚Äåÿ®ŸÜÿØ€å ⁄ØÿßŸÜ‚ÄåŸáÿß
    elif data.startswith("page_"):
        _, mode, cat, page = data.split("_")
        msg = await q.edit_message_text(f"üìÇ {cat} | ÿµŸÅÿ≠Ÿá {int(page)+1}", reply_markup=guns_keyboard(mode, cat, int(page)))
        context.job_queue.run_once(auto_delete, 60, chat_id=msg.chat_id, data=msg.message_id)

    # üî∏ ÿßŸÜÿ™ÿÆÿßÿ® ⁄ØÿßŸÜ
    elif data.startswith("gun_"):
        _, mode, gun = data.split("_", 2)
        msg = await q.edit_message_text(f"‚úÖ ⁄ØÿßŸÜ ÿßŸÜÿ™ÿÆÿßÿ®€å: {gun}\nüéÆ ŸÖŸàÿØ: {mode.upper()}")
        context.job_queue.run_once(auto_delete, 60, chat_id=msg.chat_id, data=msg.message_id)

# üîπ ÿßÿ¨ÿ±ÿß€å ÿ±ÿ®ÿßÿ™
app = Application.builder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button))

print("‚úÖ ÿ±ÿ®ÿßÿ™ ÿ®ÿØŸàŸÜ ÿÆÿ∑ÿß Ÿà ÿ®ÿß ÿØ⁄©ŸÖŸá ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ¢ŸÖÿßÿØŸá ÿßÿ≥ÿ™!")
app.run_polling()